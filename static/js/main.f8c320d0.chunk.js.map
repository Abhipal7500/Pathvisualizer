{"version":3,"sources":["Algo/astar.js","Algo/dijkstra.js","Pathfinder/Node.js","Pathfinder/Pathfind.js","App.js","index.js"],"names":["heuristic","a","b","Math","abs","x","y","Astar","startNode","endNode","openSet","closedSet","path","visitedNodes","push","length","leastIndex","i","f","current","temp","previous","console","log","filter","elt","neighbours","neighbour","includes","isBarrier","tempG","g","isWall","newPath","h","error","Dijkstra","Node","_ref","isStart","isEnd","row","col","onMouseDown","onMouseEnter","onMouseUp","classes","_jsx","className","id","mouseIsPressed","isStartNode","isEndNode","isWallNode","NODE_START_ROW","NODE_START_COL","NODE_END_ROW","NODE_END_COL","currRow","currCol","algo","isVisualized","wallWeight","Pathfind","Grid","setGrid","useState","WallType","setWallType","useEffect","initialzeGrid","grid","Array","j","Spot","this","random","undefined","addneighbours","gridwithNode","children","map","rowIndex","colIndex","handleMouseDown","handleMouseEnter","handleMouseUp","document","getElementById","newGrid","getNewGridWithWallToggled","nodeClassName","clearVisualization","visualizePath","slice","node","newNode","addNeighbours","animate","VisitedNodes","Path","delay","setTimeout","visualizeShortestPath","reverse","shortestPathNodes","_jsxs","onClick","clearGrid","class","App","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.f8c320d0.chunk.js","sourcesContent":["function Astar(startNode, endNode){\n    let openSet=[];\n    let closedSet=[];\n    let path=[];\n    let visitedNodes=[];\n\n    openSet.push(startNode);\n    while(openSet.length>0)\n    {\n        let leastIndex=0;\n        for(let i=0; i<openSet.length;i++)\n        {\n            if(openSet[i].f< openSet[leastIndex].f){\n                leastIndex=i;\n            }\n        }  \n\n        let current = openSet[leastIndex];\n        visitedNodes.push(current);\n\n        if(current === endNode){\n            let temp=current;\n            path.push(temp);\n            while(temp.previous){\n                path.push(temp.previous);\n                temp = temp.previous;\n            }\n            console.log(path);\n            return {path, visitedNodes};\n        }\n\n        openSet = openSet.filter((elt) => elt!== current );\n        closedSet.push(current);\n\n        let neighbours = current.neighbours;\n        for(let i=0;i<neighbours.length;i++){\n            let neighbour = neighbours[i];\n            if(!closedSet.includes(neighbour) && neighbour.isBarrier===false){\n                let tempG = current.g + neighbour.isWall+1;\n                let newPath = false;\n                if(openSet.includes(neighbour)){\n                    if(tempG < neighbour.g){\n                        neighbour.g=tempG;\n                        newPath=true;\n                    }\n                }\n                else{\n                    neighbour.g=tempG;\n                    newPath=true;\n                    openSet.push(neighbour);\n                }\n                if(newPath){\n                    neighbour.h= heuristic(neighbour, endNode);\n                    neighbour.f = neighbour.g + neighbour.h;\n                    neighbour.previous = current;\n                }    \n            }\n        }\n    }\n\n    return {path,visitedNodes, error:\"No Path Found!\"};\n}\n\nfunction heuristic(a,b)\n{\n    let d =Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n    return d;\n}\n\nexport default Astar;","function Dijkstra(startNode, endNode){\n    let openSet=[];\n    let closedSet=[];\n    let path=[];\n    let visitedNodes=[];\n\n    openSet.push(startNode);\n    while(openSet.length>0)\n    {\n        let leastIndex=0;\n        for(let i=0; i<openSet.length;i++)\n        {\n            if(openSet[i].f< openSet[leastIndex].f){\n                leastIndex=i;\n            }\n        }  \n\n        let current = openSet[leastIndex];\n        visitedNodes.push(current);\n\n        if(current === endNode){\n            let temp=current;\n            path.push(temp);\n            while(temp.previous){\n                path.push(temp.previous);\n                temp = temp.previous;\n            }\n            console.log(path);\n            return {path, visitedNodes};\n        }\n\n        openSet = openSet.filter((elt) => elt!== current );\n        closedSet.push(current);\n\n        let neighbours = current.neighbours;\n        for(let i=0;i<neighbours.length;i++){\n            let neighbour = neighbours[i];\n            if(!closedSet.includes(neighbour) && neighbour.isBarrier===false){\n                let tempG = current.g + 1+neighbour.isWall;\n                let newPath = false;\n                if(openSet.includes(neighbour)){\n                    if(tempG < neighbour.g){\n                        neighbour.g=tempG;\n                        newPath=true;\n                    }\n                }\n                else{\n                    neighbour.g=tempG;\n                    newPath=true;\n                    openSet.push(neighbour);\n                }\n                if(newPath){\n                    neighbour.h= heuristic(neighbour, endNode);\n                    neighbour.f = neighbour.g + neighbour.h;\n                    neighbour.previous = current;\n                }    \n            }\n        }\n    }\n\n    return {path,visitedNodes, error:\"No Path Found!\"};\n}\n\nfunction heuristic(a,b)\n{\n    return 0;\n}\n\nexport default Dijkstra;","import './Node.css';\n\nconst Node = ({\n    isStart, \n    isEnd, \n    row, \n    col, \n    isWall,\n    isBarrier,\n    //onMouseClick,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp\n}) => {\n    \n    const classes = isStart? \"node-start\" : isWall? \"node-wall\" :isEnd? \"node-end\": isBarrier? \"node-barrier\" : \"\";\n    return   <div \n    className={`node ${classes}`} \n    id={`node-${row}-${col}`} \n    onMouseDown={() => {onMouseDown(row, col)}}\n    onMouseEnter={() => {onMouseEnter(row, col)}}\n    onMouseUp={() => {  onMouseUp(row,col)}}\n    ></div>;\n};\n \nexport default Node;","import React, { useState, useEffect } from \"react\";\nimport Astar from \"../Algo/astar\";\nimport Dijkstra from \"../Algo/dijkstra\";\nimport Node from './Node';\nimport './Pathfind.css';\n\nconst row=12;\nconst col=45;\nlet mouseIsPressed = false;\nlet isStartNode= false;\nlet isEndNode= false;\nlet isWallNode= false; \nlet NODE_START_ROW = 0;\nlet NODE_START_COL = 0;\nlet NODE_END_ROW = row-1;\nlet NODE_END_COL = col-1;\nlet currRow = 0;\nlet currCol = 0;\nlet algo=\"Astar\";\nlet isVisualized = false;\nlet wallWeight=5;\n// let wallType=\"Add Weighted(5) Node\";\n\nconst Pathfind = () => {\n\n\t\tconst [Grid,setGrid] = useState([]);\n\t\tconst [WallType,setWallType] = useState(\"Weighted(6)\");\n\n\t\tuseEffect(()=>{\n\t\t\t\tinitialzeGrid();\n\t\t},[]);\n\n\t\tconst initialzeGrid=() =>{\n\t\t\t\tconst grid=new Array(row);\n\n\t\t\t\tfor(let i=0;i<row;i++){\n\t\t\t\t\t\tgrid[i]= new Array(col);\n\t\t\t\t}\n\n\t\t\t\tfor(let i=0;i<row;i++){\n\t\t\t\t\t\tfor(let j=0;j<col;j++){\n\t\t\t\t\t\t\t\tgrid[i][j]=new Spot(i,j);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsetGrid(grid);\n\t\t\t\t\n\t\t};\n\n\t\tconst addNeighbours = (grid) => {\n\t\t\t\tfor(let i=0 ; i<row ; i++)\n\t\t\t\t{\n\t\t\t\t\t\tfor(let j=0;j<col;j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgrid[i][j].addneighbours(grid);\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\tfunction Spot(i,j){\n\t\t\t\tthis.x=i;   \n\t\t\t\tthis.y=j;\n\t\t\t\tthis.isStart= this.x === NODE_START_ROW && this.y === NODE_START_COL;\n\t\t\t\tthis.isEnd = this.x === NODE_END_ROW && this.y === NODE_END_COL;\n\t\t\t\tthis.g=0;\n\t\t\t\tthis.f=0;\n\t\t\t\tthis.h=0;\n\t\t\t\tthis.isWall=0;\n\t\t\t\tthis.isBarrier=false;\n\t\t\t\tif((Math.random(1)<0.05) && (this.isStart !== true) && (this.isEnd !== true)){this.isWall=5;}\n\t\t\t\tif((Math.random(1)<0.05) && (this.isStart !== true) && (this.isEnd !== true)){this.isBarrier=true;}\n\t\t\t\tthis.neighbours= [];\n\t\t\t\tthis.previous=undefined;\n\t\t\t\tthis.addneighbours = function (grid){\n\t\t\t\t\t\tlet i= this.x, j= this.y;\n\t\t\t\t\t\tthis.neighbours=[];\n\t\t\t\t\t\tif(i>0) this.neighbours.push(grid[i-1][j]);\n\t\t\t\t\t\tif(i<row-1) this.neighbours.push(grid[i+1][j]);\n\t\t\t\t\t\tif(j>0) this.neighbours.push(grid[i][j-1]);\n\t\t\t\t\t\tif(j<col-1) this.neighbours.push(grid[i][j+1]);\n\t\t\t\t}\n\t\t}\n\t\t\n\t\tconst gridwithNode=(\n\t\t\t\t<div >\n\t\t\t\t\t\t{Grid.map((row, rowIndex)=>{\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t\t<div key={rowIndex} className='rowWrapper'>\n\t\t\t\t\t\t\t\t\t\t{row.map((col,colIndex) =>{\n\t\t\t\t\t\t\t\t\t\t\t\tconst {isStart, isEnd, isWall,isBarrier} = col;\n\t\t\t\t\t\t\t\t\t\t\t\treturn <Node \n\t\t\t\t\t\t\t\t\t\t\t\tkey={rowIndex} \n\t\t\t\t\t\t\t\t\t\t\t\tisStart={isStart} \n\t\t\t\t\t\t\t\t\t\t\t\tisEnd={isEnd} \n\t\t\t\t\t\t\t\t\t\t\t\trow={rowIndex} \n\t\t\t\t\t\t\t\t\t\t\t\tcol={colIndex} \n\t\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\n\t\t\t\t\t\t\t\t\t\t\t\tisBarrier={isBarrier} \n\t\t\t\t\t\t\t\t\t\t\t\t//onMouseClick ={ (row,col) =>{ handleMouseClick(row, col)}}\n\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown ={ (row,col) =>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleMouseDown(row, col)\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter ={ (row,col) =>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleMouseEnter(row, col)\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseUp ={ (row,col) =>{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleMouseUp(row, col)\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>;\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</div> \n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t);\n\n\t\tconst handleMouseDown = (row, col) => {\n\t\t\t\tif (\n\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ===\n\t\t\t\t\t'node node-start'\n\t\t\t\t) {\n\t\t\t\t\t\tmouseIsPressed= true;\n\t\t\t\t\t\tisStartNode= true;\n\t\t\t\t\t\tcurrRow= row;\n\t\t\t\t\t\tcurrCol= col;\n\t\t\t\t} else if (\n\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ===\n\t\t\t\t\t'node node-end'\n\t\t\t\t) {\n\t\t\t\t\t\tmouseIsPressed= true;\n\t\t\t\t\t\tisEndNode= true;\n\t\t\t\t\t\tcurrRow= row;\n\t\t\t\t\t\tcurrCol= col;\n\t\t\t\t} else {\n\t\t\t\t\tconst newGrid = getNewGridWithWallToggled(Grid, row, col);\n\t\t\t\t\t\tsetGrid(newGrid);\n\t\t\t\t\t\tmouseIsPressed= true;\n\t\t\t\t\t\tisWallNode= true;\n\t\t\t\t\t\tcurrRow= row;\n\t\t\t\t\t\tcurrCol= col;\n\t\t\t\t}\n\t\t};\n\n\t\tconst handleMouseEnter = (row, col) => {\n\t\t\t\tif(mouseIsPressed === true){\n\t\t\t\tconst nodeClassName = document.getElementById(`node-${row}-${col}`).className;\n\t\t\t\tif (isStartNode) \n\t\t\t\t{\n\t\t\t\t\tif (nodeClassName !== 'node node-wall'  && nodeClassName !== 'node node-end' &&\n\t\t\t\t\tnodeClassName !== 'node node-instant-visited-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-visited-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-instant-shortest-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-shortest-wall' && \n\t\t\t\t\tnodeClassName !== 'node node-barrier') \n\t\t\t\t\t{\n\t\t\t\t\t\tconst prevStartNode = Grid[currRow][currCol];\n\t\t\t\t\t\tprevStartNode.isStart = false;\n\t\t\t\t\t\tdocument.getElementById(`node-${currRow}-${currCol}`).className = 'node';\n\t\t\t\t\t\tcurrRow= row; currCol= col;\n\t\t\t\t\t\tconst currStartNode = Grid[row][col];\n\t\t\t\t\t\tcurrStartNode.isStart = true;\n\t\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className ='node node-start';\n\t\t\tNODE_START_ROW= row; NODE_START_COL= col;\n\t\t\tconsole.log(NODE_START_ROW,NODE_START_COL);\n\t\t\t\t\t}\n\t\t\tif(isVisualized === true)\n\t\t\t{\n\t\t\tclearVisualization();\n\t\t\tvisualizePath();\n\t\t\t}\n\t\t\t\t} else if (isEndNode) {\n\t\t\t\t\tif (nodeClassName !== 'node node-wall' && nodeClassName !== 'node node-start' &&\n\t\t\t\t\tnodeClassName !== 'node node-instant-visited-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-visited-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-instant-shortest-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-shortest-wall' &&\n\t\t\t\t\tnodeClassName !== 'node node-barrier'\t\t\t\t\t\n\t\t\t\t\t ) {\n\t\t\t\t\t\tconst prevEndNode = Grid[currRow][currCol];\n\t\t\t\t\t\tprevEndNode.isEnd = false;\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t`node-${currRow}-${currCol}`,\n\t\t\t\t\t\t).className = 'node';\n\n\t\t\t\t\t\tcurrRow= row; currCol= col;\n\t\t\t\t\t\tconst currFinishNode = Grid[row][col];\n\t\t\t\t\t\tcurrFinishNode.isEnd = true;\n\t\t\t\t\t\tdocument.getElementById(`node-${row}-${col}`).className =\n\t\t\t\t\t\t\t'node node-end';\n\t\t\tNODE_END_ROW= row; NODE_END_COL= col;\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\tif(isVisualized === true)\n\t\t\t{\n\t\t\tclearVisualization();\n\t\t\tvisualizePath();\n\t\t\t}\n\t\t\t\t} else if (isWallNode) {\n\t\t\t\t\tconst newGrid = getNewGridWithWallToggled(Grid, row, col);\n\t\t\t\t\tsetGrid(newGrid);\n\t\t\t\t}\n\t\t}  \n\t};\n\n\t\tconst handleMouseUp = (row, col) => {\n\t\t\t\tconsole.log(row, col);\n\t\t\tmouseIsPressed= false;\n\t\t\tif (isStartNode) {\n\t\t\t\tisStartNode = !isStartNode;\n\t\t\t\tNODE_START_ROW= row; NODE_START_COL= col;\n\t\t\t} else if (isEndNode) {\n\t\t\t\tisEndNode = !isEndNode;\n\t\t\t\t\t\tNODE_END_ROW= row;  NODE_END_COL= col;\n\t\t\t}\n\t\tif(isVisualized === true)\n\t\t{\n\t\t\tclearVisualization();\n\t\t\tvisualizePath();\n\t\t}\n\t\t\t//initialzeGrid();\n\t};\n\n\n\t\tconst getNewGridWithWallToggled = (grid, row, col) => {\n\t\t\t\tconsole.log(grid);\n\t\t\t\tconst newGrid = grid.slice();\n\t\t\t\tconst node = newGrid[row][col];\n\t\t\t\tif (!node.isStart && !node.isEnd) {\n\t\t\t\t\tif(wallWeight===5){\n\t\t\t\t\t\tconst newNode = {\n\t\t\t\t\t\t\t...node,\n\t\t\t\t\t\t\tisBarrier: false,\n\t\t\t\t\t\t\tisWall: (5-node.isWall),\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnewGrid[row][col] = newNode;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tconst newNode = {\n\t\t\t\t\t\t\t...node,\n\t\t\t\t\t\t\tisBarrier: !node.isBarrier,\n\t\t\t\t\t\t\tisWall: 0,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnewGrid[row][col] = newNode;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn newGrid;\n\t\t\t};\n\t\t\t\n\n\t\t//console.log(Grid);\n\t\t//console.log(Path);\n\t\t\n\t\t\n\n\t\tconst visualizePath = () =>{\n\t\t\n\t\t\t\taddNeighbours(Grid);\n\t\t\t\tconsole.log(NODE_START_ROW,NODE_START_COL);\n\t\t\t\tlet startNode = Grid[NODE_START_ROW][NODE_START_COL];\n\t\t\t\tlet endNode   = Grid[NODE_END_ROW][NODE_END_COL];\n\t\t\t\tstartNode.isWall=0;\n\t\t\t\tstartNode.isBarrier=false;\n\t\t\t\tendNode.isWall=0;\n\t\t\t\tendNode.isBarrier=false;\n\t\t\t\tlet path;\n\t\t\t\tif(algo==='Astar') path = Astar(startNode, endNode);\n\t\t\t\tif(algo==='Dijkstra')  path = Dijkstra(startNode, endNode);\n\t\t\t\tanimate(path.visitedNodes, path.path);\n\t\t}\n\n\t\tconst animate = (VisitedNodes,Path) => {\n\t\tlet delay = 20;\n\t\tif(isVisualized === true)\n\t\t{\n\t\t\tdelay = 0;\n\t\t}\n\t\t\t\tfor(let i=1;i<=VisitedNodes.length-1; i++){\n\t\t\t\t\t\tif(i===VisitedNodes.length-1){\n\t\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\t\t\tvisualizeShortestPath(Path.reverse());\n\t\t\t\t\t\t},delay*i);\n\t\t\t\t}else{\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tconst node = VisitedNodes[i];\n\t\t\t\tif(isVisualized === true)\n\t\t\t\t{\n\t\t\t\t\tif((document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-shortest-wall\")  || \n\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-wall\") || \n\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-instant-shortest-wall\")||\n\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-visited-wall\")   || \n\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-instant-visited-wall\")\n\t\t\t\t\t\t\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-instant-visited-wall\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-instant-visited\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t\tif((document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-wall\") || \n\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-visited-wall\")|| \n\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-shortest-wall\") )\n\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-visited-wall\";\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-visited\";\n\t\t\t\t}\n\t\t\t\t\t\t}, delay*i);\n\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t};\n\n\tconst visualizeShortestPath = (shortestPathNodes) =>{\n\t\tlet delay = 10;\n\t\tif(isVisualized === true)\n\t\t{\n\t\t\tdelay = 0;\n\t\t}\n\t\t\t\tfor(let i=1;i<shortestPathNodes.length-1;i++){\n\t\t\tsetTimeout(()=>{\n\t\t\t\t\tconst node = shortestPathNodes[i];\n\t\t\t\t\tif(isVisualized === true)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-shortest-wall\")  || \n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-wall\") || \n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-instant-shortest-wall\")||\n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-visited-wall\")   || \n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-instant-visited-wall\"))\n\t\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-instant-shortest-wall\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-instant-shortest-path\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t\tif((document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-wall\") || \n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-visited-wall\")|| \n\t\t\t\t\t\t\t(document.getElementById(`node-${node.x}-${node.y}`).className === \"node node-shortest-wall\") )\n\t\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-shortest-wall\";\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className= \"node node-shortest-path\";\n\t\t\t\t\t}\n\t\t\t},delay*i);\n\t\t}\n\t\tisVisualized = true;\n\t\t};\n\n\tconst clearGrid = () => {\n\t\t\tconst newGrid = Grid.slice();\n\t\t\tfor (const row of newGrid) {\n\t\t\t\tfor (const node of row) {\n\t\t\t\t\tlet nodeClassName = document.getElementById(`node-${node.x}-${node.y}`,).className;\n\t\t\t\t\tif (\n\t\t\t\t\t\tnodeClassName !== 'node node-start' &&\n\t\t\t\t\t\tnodeClassName !== 'node node-end'\n\t\t\t\t\t) {\n\t\t\t\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className ='node';\n\t\t\t\t\t\tnode.g=0;\n\t\t\t\t\t\tnode.f=0;\n\t\t\t\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\t\t\tnode.neighbours= [];\n\t\t\tnode.previous=undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (nodeClassName === 'node node-end') {\n\t\t\t\t\t\tnode.g=0;\n\t\t\t\t\t\tnode.f=0;\n\t\t\t\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\t\t\tnode.neighbours= [];\n\t\t\tnode.previous=undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (nodeClassName === 'node node-start') {\n\t\t\tnode.g=0;\n\t\t\t\t\t\tnode.f=0;\n\t\t\t\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\t\t\tnode.neighbours= [];\n\t\t\tnode.previous=undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\tsetGrid(newGrid);\n\t}\n\n\tconst clearVisualization = () => {\n\t//isVisualized = false;\n\tconst newGrid = Grid.slice();\n\tfor (const row of newGrid) {\n\t\tfor (const node of row) {\n\t\tlet nodeClassName = document.getElementById(`node-${node.x}-${node.y}`,).className;\n\t\tif (\n\t\t\tnodeClassName !== 'node node-start' &&\n\t\t\tnodeClassName !== 'node node-end'   &&\n\t\t\tnodeClassName !== 'node node-wall' &&\n\t\t\tnodeClassName !== 'node node-instant-visited-wall' &&\n\t\t\tnodeClassName !== 'node node-visited-wall' &&\n\t\t\tnodeClassName !== 'node node-instant-shortest-wall' &&\n\t\t\tnodeClassName !== 'node node-shortest-wall' &&\n\t\t\tnodeClassName !== 'node node-barrier'\n\t\t) {\n\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className ='node';\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\t// node.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\tif (nodeClassName === 'node node-end') {\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\tif (nodeClassName === 'node node-start') {\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=false;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\tif (nodeClassName === 'node node-instant-visited-wall' || nodeClassName === 'node node-visited-wall') {\n\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className ='node node-wall';\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\tnode.isBarrier=false;\n\t\t\tnode.isWall=5;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\tif (nodeClassName === 'node node-instant-shortest-wall' || nodeClassName === 'node node-shortest-wall') {\n\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className ='node node-wall';\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\tnode.isWall=5;\n\t\t\tnode.isBarrier=false;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\tif(nodeClassName === 'node node-barrier'){\n\t\t\tdocument.getElementById(`node-${node.x}-${node.y}`).className ='node node-barrier';\n\t\t\tnode.g=0;\n\t\t\tnode.f=0;\n\t\t\tnode.h=0;\n\t\t\tnode.isWall=0;\n\t\t\tnode.isBarrier=true;\n\t\t\tnode.previous=undefined;\n\t\t}\n\t\t}\n\t}\n\tsetGrid(newGrid);\n\t\n}\n\nconst changeWallWeight = () => {\n\twallWeight=5-wallWeight;\n\tif(wallWeight===0) setWallType(\"Wall\");\n\telse setWallType(\"Weighted(6)\");\n}\n\n\t\treturn (  \n\t\t\t\t<div className=\"Wrapper\">\n\t\t\t\t\t\t<h1>Pathfinding Visualizer</h1>\n\t\t\t\t\t\t<button className=\"button button1\" onClick={()=> {isVisualized = false;\talgo = \"Astar\"; visualizePath();}}>Visualize Astar</button>\n\t\t\t\t\t\t<button className=\"button button2\" onClick={() => {isVisualized = false; algo=\"Dijkstra\"; visualizePath();}}>Visualize Dijkstra</button>\n\t\t\t\t\t\t<button className=\"button button3\" onClick={()=>{ isVisualized = false;clearGrid();}}>Clear Grid</button>\n\t\t\t\t\t\t<button className=\"button button4\" onClick={() =>{isVisualized = false; clearVisualization();}}>Clear Visualization</button>\n\t\t\t\t\t\t<button className=\"button button5\" onClick={() => changeWallWeight()}>Toggle   (Node Type = {WallType})</button>\n\t\t\t\t\t \t{gridwithNode}\n\t\t\t\t\t\t <ul class=\"legend\">\n\t\t\t\t\t\t \t<li><span class=\"start\"></span> Starting Node</li>\n\t\t\t\t\t\t\t<li><span class=\"end\"></span> End Node</li>\n\t\t\t\t\t\t\t<li><span class=\"wall\"></span> Weighted Node</li>\n\t\t\t\t\t\t\t<li><span class=\"barrier\"></span> Wall Node</li>\n\t\t\t\t\t\t\t<li><span class=\"visited\"></span> Visited Node</li>\n\t\t\t\t\t\t\t<li><span class=\"shortest-path\"></span> Shortest Node</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<br></br><br></br><br></br>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\tMade by Abhishek Pal\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<br></br>\n\t\t\t\t</div>\n\t\t);\n};\n \nexport default Pathfind;","import './App.css';\nimport Pathfind from './Pathfinder/Pathfind';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Pathfind></Pathfind>\n    </div>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n/*\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n*/"],"sourceRoot":""}